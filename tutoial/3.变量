1. shell中只有一种数据类型: 字符串



2. 变量: 环境变量, 本地变量
   (可以类比全局变量, 本地变量)
   两种变量定义和取消定义:
   * 定义: name=value; 
   * 删除定义:unset name
   
   
   ---
   * 环境变量:
   环境变量可以从当前shell进程传递给fork出来的子进程,
   即但凡由当前shell创建的进程/执行的命令都可以共享此变量.
   (env或者printenv可以查看所有的环境变量)
   
   PATH只是env中的一种环境变量.
   单独查看PATH环境变量: echo $PATH



   
   ---
   * 本地变量:
   总是以键值对的形式出现(不能有空格),例如: var=1
   后续拿到这个变量的值,就要使用$表示取它的值-参见variable.sh
   
   #! /bin/bash

   var=1
   echo $var


   (但是这样定义的变量是不能在该文件之外使用的,除外source或者.或者导出)
   临时导出(本次导出的shell可以使用): export var

   例如:(就在当前终端,不需要建立文件)

   num=2
   echo $num  可以看到结果是2

   但是"env | grep num"看不到结果,需要"export num"
   


然后取消变量(不管哪种变量),可以使用 unset num
   
---

补充:

变量子串的操作:

1. 返回$string的长度
${#string}


提取
2. 在$string中，从位置position之后开始提取子串
${string:position}

3. 在string中，从位置position之后开始提取长度为string中，从位置position之后开始提取长度为length的子串
${string:position:length}	


截断
4. 从变量string开头删除最短匹配string开头删除最短匹配substring子串
${string#substring}

5. 从变量string开头删除最长匹配string开头删除最长匹配substring子串
${string##substring}


6. 从变量string结尾删除最短匹配string结尾删除最短匹配substring子串
${string%substring}

7. 从变量string结尾删除最长匹配string结尾删除最长匹配substring子串
${string%%substring}


替换
8. 使用replace来代替第一个匹配的replace来代替第一个匹配的substring
${string/substring/replace}

9. 使用replace来代替所有匹配的replace来代替所有匹配的substring
${string//substring/replace}

10. 如果string前缀匹配string前缀匹配substring,
    就用replace来代替匹配的字符串replace来代替匹配的字符串substring
${string/#substring/replace}


11. 如果string后缀匹配string后缀匹配substring,
    就用replace来代替匹配的字符串replace来代替匹配的字符串substring
${string/%substring/replace}
   
   


   
   

