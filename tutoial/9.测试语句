条件测试
(shell脚本中分支测试比较复杂, 相对于c来说, 它是以参数选项的形式来的)
(shell中测试和分支是分开的语法)

格式如下:
  1. test condition
  2. [ condition ]
  
  注意: 空格(把第一个[理解成一个命令,后面一个]理解成一个参数,所以都需要空格)
  注意: 为真返回0.

(相关测试代码, 参见test_statement.sh)

测试分类:

0. 一般性测试
   这里的选项比较多, 但是一般常用的如下:
   -d 文件是否为目录
   -s 文件长度是否大于0
   -f 文件是否为普通文件
   -p 文件是否是管道文件
   -L 文件是否为普通链接
   -u 文件是否设置了suid位
   -r 文件是否可读
   -w 文件是否可写
   -x 文件是否可执行
   ....

   例如:
   [ -w test.txt ]
   echo $?
   


1. 逻辑测试(与或非)
   -a 逻辑与
   -o 逻辑或
   ! 逻辑非

   例如:
   [ -w $1 -a $2 ]
   echo $? 

   检查第一个参数和第二个参数指定的文件是否可写
   (两个同时可写的时候,返回真)

   好的建议是, 只要是变量取值,就应该用""括起来,
   举个例子:
   var=hello
   [ -d dir -a $var = 'hello' ]
   然后如果var没有定义,即var=
   那么上面的语句实际上变成了:
   [ -d dir -a ='hello' ]
   存在语法错误了.
   实际上,规范点儿可以写成:
   [ -d dir -a "$var" = 'hello' ]


2. 字符串测试
   (测试用户输入, 比较变量等; 不用使用特殊函数, 可以直接进行比较)
   shell中比较字符串是逐个字符进行的.

   形式如下: (个人推荐[]的形式)

   test "string"
   test operator "string"
   test "string1" operator "string2"

   [ operator "string" ]
   [ "string1" operator "string2" ]

   operator有4中情况:
      =  判断相等
      != 判断不等
      -z 判断空串(长度为0,zero)
      -n 判断是非空字符串(长度非0)


   特殊的:
      str2="" 或者str2=
      [ -n $str2 ]  结果是0
      [ -n "$str2" ] 结果是1

  并且注意:
      var1=hello
      var2=hello
  但是
      [ var1 = var2 ]
      [ $var1 = $var2 ]
结果不一样, 前者为假(1),后者为真(0)




3. 数值测试
   (数值也是以字符串的形式存储的)
   [ "number" operator "number2" ]

operator有6种情况:
   -eq 判断相等
   -ne 判断不等
   -gt 判断第一个大于第二个
   -lt 判断第一个小于第二个
   -le 判断小于等于
   -ge 判断大于等于


   [ "2" -eq "2" ]
   echo $? #0
   
   
   并且下面的测试,均返回true
   [ 0 ] #0
   [ -1 ] #0
   [ 1 ] #0

   空串没有任何值, 所以返回false
   [  ] #1
   